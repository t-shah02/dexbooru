generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(uuid())
  username               String          @unique() @db.VarChar(15)
  email                  String          @unique()
  password               String
  createdAt              DateTime        @default(now())
  profilePictureUrl      String
  profilePictureFileID   String
  posts                  Post[]          @relation("createdPosts")
  savedPosts             Post[]          @relation("savedPosts")
  sessionToken           String          @unique()
  comments               Comment[]
  friendRequestsSent     FriendRequest[] @relation("sent_friend_requests")
  friendRequestsReceived FriendRequest[] @relation("received_friend_requests")
  friends                User[]          @relation("friends")
  symmetricFriends       User[]          @relation("friends")

  @@index([id])
}

model FriendRequest {
  sender     User     @relation("sent_friend_requests", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("received_friend_requests", fields: [receiverId], references: [id])
  receiverId String
  sentOn     DateTime @default(now())

  @@id([senderId, receiverId])
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique()
  posts Post[]
}

model Artist {
  id    String @id @default(uuid())
  name  String @unique()
  posts Post[]
}

model Post {
  id        String    @id @default(uuid())
  images    String[]
  imageIDs  String[]
  tags      Tag[]
  artists   Artist[]
  title     String
  views     Int       @default(0)
  nsfw      Boolean   @default(false)
  createdAt DateTime  @default(now())
  author    User      @relation("createdPosts", fields: [authorId], references: [id])
  savedBy   User[]    @relation("savedPosts")
  authorId  String
  comments  Comment[]

  @@index([id])
}

model Comment {
  id              String    @id @default(uuid())
  content         String
  createdAt       DateTime  @default(now())
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String
  post            Post      @relation(fields: [postId], references: [id])
  postId          String
  replies         Comment[] @relation("replies")
  parentComment   Comment?  @relation("replies", fields: [parentCommentID], references: [id])
  parentCommentID String?
}
